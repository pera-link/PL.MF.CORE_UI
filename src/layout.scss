@use "variables" as *;
@use 'sass:meta';

// margin padding classes
// This file generates utility classes for margin and padding based on the defined spacing scale, directions, and breakpoints.
// <m/p>-<breakpoint>-<direction>-<spacing-scale>
// Example: m-sm, p-md, m-x-lg, p-t-2xl
// This will generate classes like:
// .m-sm { margin: 0.25rem; }
// .p-md { padding: 1rem; }
// .m-x-lg { margin-left: 2rem; margin-right: 2rem; }
// .p-t-2xl { padding-top: 8rem; } 

@each $break-key, $break-value in $breakpoints {
  @each $prop-key, $prop-value in $spacing_properties {
    @each $dir-key, $dir-value in $directions {
      @each $space-key, $space-value in $spacing-scale {
        // Build class name (skip empty segments)
        $class-name: $prop-key;
        @if $break-key != '' { $class-name: $class-name + '-' + $break-key; }
        @if $dir-key != '' { $class-name: $class-name + '-' + $dir-key; }
        @if $space-key != '' { $class-name: $class-name + '-' + $space-key; }

        // Generate CSS (avoid invalid properties)
        .#{$class-name} {
          @if $dir-key == '' {
            // Case 1: No direction (e.g., "m-sm" → "margin: 0.25rem")
            #{$prop-value}: #{$space-value};
          } @else if  meta.type-of($dir-value) == 'list' {
            // Case 2: List of directions (e.g., "m-x-sm" → "margin-left: 0.25rem; margin-right: 0.25rem")
            @each $d in $dir-value {
              #{$prop-value}-#{$d}: #{$space-value};
            }
          } @else {
            // Case 3: Single direction (e.g., "m-r-sm" → "margin-right: 0.25rem")
            #{$prop-value}-#{$dir-value}: #{$space-value};
          }
        }
      }
    }
  }
}

// Sizing classes
// This file generates utility classes for sizing based on the defined sizing scale and breakpoints.
// <w/h>-<breakpoint>-<sizing-scale>
// Example: w-0, h-0, w-50, h-100
// This will generate classes like:
// .w-0 { width: 0; }
// .h-0 { height: 0; }
@each $break-key, $break-value in $breakpoints {
  @each $prop-key, $prop-value in $sizing_properties {
    @each $size-key, $size-value in $sizing-scale {
      // Build class name (skip empty segments)
      $class-name: $prop-key;
      @if $break-key != '' { $class-name: $class-name + '-' + $break-key; }
      @if $size-key != '' { $class-name: $class-name + '-' + $size-key; }

      // Generate CSS (avoid invalid properties)
      .#{$class-name} {
        #{$prop-value}: #{$size-value};
      }
    }
  }
}
